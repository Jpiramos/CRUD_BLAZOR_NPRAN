@page "/doctors/delete"
@inject ClinicFlow_Blazor.Data.ApplicationDbContext DB
@using ClinicFlow_Blazor.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Deletar</h1>

<h3>Tem certeza que deseja deletar ?</h3>
<div>
    <h4>Médico</h4>
    <hr />
    @if (doctor is null)
    {
        <p><em>Carregando...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Especialidade</dt>
            <dd class="col-sm-10">@doctor.Specialty</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Primeiro Nome</dt>
            <dd class="col-sm-10">@doctor.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Umtimo Nome</dt>
            <dd class="col-sm-10">@doctor.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@doctor.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Cpf</dt>
            <dd class="col-sm-10">@doctor.Cpf</dd>
        </dl>
        <EditForm method="post" Model="doctor" OnValidSubmit="DeleteDoctor" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(doctor is null)">Deletar</button> |
            <a href="/doctors">Voltar à lista</a>
        </EditForm>
    }
</div>

@code {
    Doctor? doctor;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        doctor = await DB.Doctors.FirstOrDefaultAsync(m => m.Id == Id);

        if (doctor is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteDoctor()
    {
        DB.Doctors.Remove(doctor!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/doctors");
    }
}
